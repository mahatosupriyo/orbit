generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
}

enum AssetStatus {
    UPLOADING
    PROCESSING
    READY
    ERROR
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String    @id @default(cuid())
    name               String?
    email              String?   @unique
    emailVerified      DateTime?
    image              String?
    username           String?   @unique
    lastUsernameUpdate DateTime?
    lastNameUpdate     DateTime?
    lastImageUpdate    DateTime?
    verified           Boolean   @default(false)
    role               UserRole  @default(USER)

    accounts    Account[]
    sessions    Session[]
    posts       Post[]
    garagePosts GaragePost[]
    courses     Course[]
    payments    Payment[]

    // Follow system
    following Follow[] @relation("FollowingRelation")
    followers Follow[] @relation("FollowerRelation")

    followerCount  Int @default(0)
    followingCount Int @default(0)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GaragePost {
    id          Int      @id @default(autoincrement())
    title       String
    caption     String?
    externalUrl String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    images   Asset[] @relation("GaragePostImages")
    makingOf Asset?  @relation("GaragePostVideo", fields: [assetId], references: [id])
    assetId  Int?    @unique
}

model Course {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    lessons Lesson[]
}

model Lesson {
    id       Int     @id @default(autoincrement())
    title    String
    content  String?
    video    Asset   @relation(fields: [videoId], references: [id])
    videoId  Int
    course   Course  @relation(fields: [courseId], references: [id])
    courseId Int
    order    Int
}

model Asset {
    id          Int         @id @default(autoincrement())
    playbackID  String      @default("")
    muxAssetId  String?     @unique
    status      AssetStatus @default(UPLOADING)
    duration    Float?
    aspectRatio String?
    filename    String?
    order       Int?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @default(now()) @updatedAt

    GaragePostVideo  GaragePost?  @relation("GaragePostVideo")
    GaragePostImages GaragePost[] @relation("GaragePostImages")
    Lesson           Lesson[]

    @@index([muxAssetId])
    @@index([status])
}

model Payment {
    id                String    @id @default(cuid())
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String
    razorpayOrderId   String    @unique
    razorpayPaymentId String?
    amount            Int
    status            String
    plan              String
    startDate         DateTime?
    endDate           DateTime?
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}

model Follow {
    id          String   @id @default(cuid())
    follower    User     @relation("FollowingRelation", fields: [followerId], references: [id], onDelete: Cascade)
    followerId  String
    following   User     @relation("FollowerRelation", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String
    createdAt   DateTime @default(now())

    @@unique([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}
