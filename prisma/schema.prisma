// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String    @id @default(cuid())
    name               String?
    email              String?   @unique
    emailVerified      DateTime?
    image              String?
    username           String?   @unique
    lastUsernameUpdate DateTime?
    lastNameUpdate     DateTime?

    role     UserRole  @default(USER)
    accounts Account[]
    sessions Session[]
    posts    Post[]

    garagePosts GaragePost[]
    courses     Course[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GaragePost {
    id          Int      @id @default(autoincrement())
    title       String
    caption     String?
    externalUrl String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    images   Asset[] @relation("GaragePostImages")
    makingOf Asset?  @relation("GaragePostVideo", fields: [assetId], references: [id])
    assetId  Int?    @unique
}

model Course {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    lessons Lesson[]
}

model Lesson {
    id       Int     @id @default(autoincrement())
    title    String
    content  String? // optional text content or markdown
    video    Asset   @relation(fields: [videoId], references: [id])
    videoId  Int
    course   Course  @relation(fields: [courseId], references: [id])
    courseId Int

    order Int // for lesson ordering
}

model Asset {
    id        Int      @id @default(autoincrement())
    url       String
    type      String
    width     Int?
    height    Int?
    duration  Int?
    publicId  String?
    createdAt DateTime @default(now())

    // Optional making-of video for a single GaragePost
    GaragePostVideo GaragePost? @relation("GaragePostVideo")

    // Multiple images for a GaragePost
    GaragePostImages GaragePost[] @relation("GaragePostImages")

    // Used in lessons
    Lesson Lesson[]
}
